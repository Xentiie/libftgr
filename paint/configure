#!/bin/bash
VER=1.0.3
set -e
cd "$(dirname "$0")"

#===================================================
join() {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

# echo 'nom: premier arg'
# suivit d'une backtrace
#
# le deuxieme arg spécifie combien d'appels on skip dans la backtrace, du plus récent
cf_error() {
	local i
	local skip

	if [ "$#" -gt 2 ]; then
		skip=$(eval "$2+1")
		export skip
	else
		skip=1
		export skip
	fi

	echo "$_OWN_NAME: $1"
	for ((i=skip; i<${#FUNCNAME[@]}; i++)); do
		if [[ "${FUNCNAME[i]}" == cf_* ]]; then echo -n "  "; fi
		echo "  at ${FUNCNAME[i]} (${BASH_SOURCE[i]}:${BASH_LINENO[i-1]})"
	done
}

#le nom de notre program
_OWN_NAME=$0
#variable a la con utilisé en bas
_N=0
#compilateurs
CC_WINDOWS=x86_64-w64-mingw32-gcc
CC_LINUX=gcc

#Global config
INDENT=0
OUTPUT_FILE="config.mk"
OBJS_PATH="./objs"
RM="rm -rf"
CC=""
#Global variables
OUT_INCLUDES=()
OUT_LIBS=()
OUT_LIBS_PATHS=()

#make = write config.mk
#config = write formatted libs and cflags
#json = write formatted json
MODE="make"
#pour déterminer le CC
TARGET_OS=""
TARGET_NAME=""
RULE_NAME=""

#Target specific infos
CFLAGS=()
INCLUDES=()
LIBS=()
LIBS_PATHS=()

SRCS=()
OBJS=()

IMPORTS=()
IMPORTS_INCLUDES=()
IMPORTS_LIBS=()
IMPORTS_LIBS_PATHS=()

#Appends text to the config file using printf
cf_append() {
	if [ "$MODE" != "make" ]; then return; fi
	for ((i=0; i<INDENT; i++)); do
		printf "\t" >> $OUTPUT_FILE
	done
	printf "$@" >> $OUTPUT_FILE
}

#Global setters
cf_set_mode() {
	if [ "$1" != "make" ] && [ "$1" != "config" ] && [ "$1" != "json" ]; then
		cf_error "mode '$1': should be make/config/json"
	fi
	MODE=$1
}
#Usage: cf_add_output_lib <name> <path>
cf_add_output_lib() {
	OUT_LIBS+=("$1")
	OUT_LIBS_PATHS+=("$(realpath "$2")")
}
#Usage: cf_add_output_lib <path>
cf_add_output_include() {
	OUT_INCLUDES+=("$(realpath "$1")")
}


#Target
cf_begin_target() {
	if [ -n "$TARGET_NAME" ]; then
		cf_error "already in a target scope"
		return 1
	fi
	TARGET_NAME="$1"
	CFLAGS=()
	INCLUDES=()
	LIBS=()
	LIBS_PATHS=()
	SRCS=()
	OBJS=()
	IMPORTS=()
	IMPORTS_INCLUDES=()
	IMPORTS_LIBS=()
	IMPORTS_LIBS_PATHS=()
}

_begin_dummy_target() {
	TARGET_NAME="dummy"
}
_end_dummy_target() {
	TARGET_NAME=""
}
_chk_target_scope() {
	if [ -z "$TARGET_NAME" ]; then
		cf_error "not in a target scope" 2
		exit 1
	fi
}

#Target setters
#Usage: cf_add_cflag "-flag"
cf_add_cflag() {
	_chk_target_scope
	CFLAGS+=("$1")
}
cf_fmt_cflags() {
	_chk_target_scope
	echo "${CFLAGS[@]}"
}

#Usage: cf_add_include <path>
cf_add_include() {
	_chk_target_scope
	INCLUDES+=("$1")
}
cf_fmt_includes() {
	_chk_target_scope
	out=""
	for i in "${INCLUDES[@]}"; do
		out="$out -I$i"
	done
	echo "$out"
}
cf_fmt_imported_includes() {
	_chk_target_scope
	out=""
	for i in "${IMPORTS_INCLUDES[@]}"; do
		out="$out -I$i"
	done
	echo "$out"
}

#Usage: cf_add_raw_lib_path <path>
cf_add_raw_lib_path() {
	_chk_target_scope
	LIBS_PATHS+=("$1")
}
cf_fmt_libs_paths() {
	_chk_target_scope
	out=""
	for l in "${LIBS_PATHS[@]}"; do
		out="$out -L$l"
	done
	echo "$out"
}
cf_fmt_imported_libs_paths() {
	_chk_target_scope
	out=""
	for l in "${IMPORTS_LIBS_PATHS[@]}"; do
		out="$out -L$l"
	done
	echo "$out"
}

#Usage: cf_add_raw_lib <library name>
cf_add_raw_lib() {
	_chk_target_scope
	LIBS+=("$1")
}
cf_fmt_libs() {
	_chk_target_scope
	out=""
	for l in "${LIBS[@]}"; do
		out="$out -l""${l#'lib'}"
	done
	echo "$out"
}
cf_fmt_imported_libs() {
	_chk_target_scope
	out=""
	for l in "${IMPORTS_LIBS[@]}"; do
		out="$out -l""${l#'lib'}"
	done
	echo "$out"
}

#Usage: cf_add_pkg <path>
cf_add_pkg() {
	_chk_target_scope
	path="$1"
	if [[ ! -f "$path/configure" ]]; then
		echo "$_OWN_NAME: $path: no suitable configure"
		return 1
	fi

	set +e
	output=$("$path/configure" --pkg-config 2>&1)
	ret=$?
	set -e
	if [ $ret -ne 0 ]; then
		echo "$_OWN_NAME: $path: couldn't execute configure --pkg-config"
		return 1
	fi

	IMPORTS+=("$path")
	IMPORTS_INCLUDES+=($(echo "$output" | grep -oP '(?<=INCLUDES=).*'))
	IMPORTS_LIBS+=($(echo "$output" | grep -oP '(?<=LIBS=).*'))
	IMPORTS_LIBS_PATHS+=($(echo "$output" | grep -oP '(?<=LIBS_PATHS=).*'))
}

cf_add_srcs() {
	_chk_target_scope
	SRCS+=($1)
}

#Usage: cf_begin_rule <rule name> [--prereq <rule name>]
cf_begin_rule() {
	_chk_target_scope

	if [ -z "$1" ]; then
		cf_error "empty rule name"
		return 1
	fi

	local prereqs=()
	local positionals=()
	local rule_name="$1"
	cf_append "$rule_name: "
	shift
	while [[ $# -gt 0 ]]; do
		case $1 in
			--prereq)
				prereqs+=("$2")
				shift
				shift
				;;
			-*)
				echo "Unknown option $1"
				return 1
				;;
			*)
				positionals+=("$1")
				shift
				;;
		esac
	done

	cf_append "$(join " " "${prereqs[@]}")\n"
	INDENT=$((INDENT+1))
	RULE_NAME=$rule_name
}
_chk_rule_scope() {
	if [ -z "$RULE_NAME" ]; then
		cf_error "not in a rule scope" 2
		exit 1
	fi
}
#Usage: cf_end_rule [phony]
cf_end_rule() {
	_chk_target_scope
	_chk_rule_scope

	local rule_name=$RULE_NAME
	RULE_NAME=""
	INDENT=$((INDENT-1))
	if [ -n "$1" ]; then
		cf_append ".PHONY: %s\n" "$rule_name"
	fi
	cf_append "\n"
}

cf_end_target() {
	_chk_target_scope

	for i in "${!SRCS[@]}"; do
		base_name=$(basename "${SRCS[i]%.c}")
		OBJS+=("$OBJS_PATH/$base_name.o")
	done

	if [ "$MODE" == "make" ]; then
		cf_append ".DEFAULT_GOAL=all\n"
		cf_append "NAME=%s\n" "$TARGET_NAME"
		cf_append "CFLAGS=%s\n" "$(cf_fmt_cflags)"
		cf_append "INCLUDES=%s %s\n" "$(cf_fmt_includes)" "$(cf_fmt_imported_includes)"
		cf_append "LIBS=%s %s\n" "$(cf_fmt_libs)" "$(cf_fmt_imported_libs)"
		cf_append "LIBS_PATHS=%s %s\n" "$(cf_fmt_libs_paths)" "$(cf_fmt_imported_libs_paths)"
		cf_append "RM=%s\n" "$RM"
		cf_append "CC=%s\n" "$CC"
		cf_append "SRCS=%s\n" "${SRCS[*]}"
		cf_append "OBJS=%s\n" "${OBJS[*]}"

		all_pkg_rules=()
		for p in "${IMPORTS[@]}"; do
			pkg_name="_$(basename "$p")"
			all_pkg_rules+=("--prereq" "$pkg_name")
			cf_begin_rule "$pkg_name"
				cf_append '$(MAKE) -C %s\n' "$p"
			cf_end_rule phony
		done

		cf_begin_rule "packages" "${all_pkg_rules[@]}"
		cf_end_rule phony

		cf_begin_rule "all" \
			--prereq "objs" \
			--prereq "packages" \
			--prereq '$(NAME)'
		cf_end_rule phony

		cf_begin_rule "objs"
			cf_append "mkdir -p %s\n" "$OBJS_PATH"
		cf_end_rule

		cf_begin_rule "clean"
			cf_append '$(RM) $(OBJS)\n'
		cf_end_rule phony

		cf_begin_rule "fclean" \
			--prereq "clean"
			cf_append '$(RM) $(NAME)\n'
		cf_end_rule phony

		cf_begin_rule "re" \
			--prereq "fclean" \
			--prereq 'all'
		cf_end_rule phony

		for i in "${!SRCS[@]}"; do
			src="${SRCS[$i]}"
			obj="${OBJS[$i]}"

			cf_begin_rule "$obj" --prereq "$src"
				cf_append '$(CC) $(CFLAGS) $(INCLUDES) -c %s -o %s\n' "$src" "$obj"
				if [[ "$COVERAGE" == "true" ]]; then
					cf_append "mv %s %s\n" "${OBJS[$i]%.o}.gcno" "$(dirname "$src")"
				fi
			cf_end_rule
		done

	elif [ "$MODE" == "config" ]; then
		printf "INCLUDES=%s %s\n" "${OUT_INCLUDES[*]}" "${IMPORTS_INCLUDES[*]}"
		printf "LIBS=%s %s %s\n" "${OUT_LIBS[*]}" "${LIBS[*]}" "${IMPORTS_LIBS[*]}"
		printf "LIBS_PATHS=%s %s %s\n" "${OUT_LIBS_PATHS[*]}" "${LIBS_PATHS[*]}" "${IMPORTS_LIBS_PATHS[*]}"
	else
		printf "{\n"
		if [ $_N -eq 0 ]; then
			printf "\t\"%s\": {\n" "$TARGET_NAME"
		else
			printf ",\n\t\"%s\": {\n" "$TARGET_NAME"
		fi
		_N=1

		printf "\t\t\"CFLAGS\": ["
		if [ -n "${CFLAGS[0]}" ]; then
			printf "\"%s\"" "${CFLAGS[0]}"
			for i in "${CFLAGS[@]:1}"; do printf ",\"%s\"" "$i"; done
		fi
		printf "],\n"

		printf "\t\t\"INCLUDES\": ["
		if [ -n "${INCLUDES[0]}" ]; then
			printf "\"%s\"" "${INCLUDES[0]}"
			for i in "${INCLUDES[@]:1}"; do printf ",\"%s\"" "$i"; done
		fi
		printf "],\n"

		printf "\t\t\"LIBS\": ["
		if [ -n "${LIBS[0]}" ]; then
			printf "\"%s\"" "${LIBS[0]}"
			for i in "${LIBS[@]:1}"; do printf ",\"%s\"" "$i"; done
		fi
		printf "],\n"

		printf "\t\t\"LIBS_PATHS\": ["
		if [ -n "${LIBS_PATHS[0]}" ]; then
			printf "\"%s\"" "${LIBS_PATHS[0]}"
			for i in "${LIBS_PATHS[@]:1}"; do printf ",\"%s\"" "$i"; done
		fi
		printf "],\n"

		printf "\t\t\"SRCS\": ["
		if [ -n "${SRCS[0]}" ]; then
			printf "\"%s\"" "${SRCS[0]}"
			for i in "${SRCS[@]:1}"; do printf ",\"%s\"" "$i"; done
		fi
		printf "],\n"

		printf "\t\t\"OBJS\": ["
		if [ -n "${OBJS[0]}" ]; then
			printf "\"%s\"" "${OBJS[0]}"
			for i in "${OBJS[@]:1}"; do printf ",\"%s\"" "$i"; done
		fi
		printf "]\n"
		
		printf "\t}\n"
		printf "}"
	fi

	TARGET_NAME=""
}

cf_run() {
	args=()
	nextarg=""
	for (( i=0; i < $# + 1; i++ )); do
		arg="${!i}"
		j="$((i+1))"
		nextarg="${!j}"
	
		if [[ "$arg" == "--pkg-config" ]]; then
			MODE="config"
		elif [[ "$arg" == "--pkg-json" ]]; then
			MODE="json"
		elif [[ "$arg" == "-t" ]] || [[ "$arg" == "--target" ]]; then
			if [[ "$nextarg" != "windows" && "$nextarg" != "linux" ]]; then
				echo "Invalid option for -t: $nextarg. Valid options are 'windows', 'linux'"
			fi
			TARGET_OS="$nextarg"
			((i++))
		else
			args+=("$arg")
		fi
	done
	echo "mode: $MODE"


	if [ "$MODE" == "make" ]; then
		echo -n > $OUTPUT_FILE
	fi

	if [ -z "$TARGET_OS" ]; then
		if [ -f "/proc/sys/fs/binfmt_misc/WSLInterop" ]; then
			TARGET_OS="windows"
		else
			TARGET_OS="linux"
		fi
		echo "selected target: $TARGET_OS"
	else
		echo "specified target: $1"
	fi


	_begin_dummy_target
	if [ "$TARGET_OS" == "linux" ]; then
		CC=$CC_LINUX
		cf_add_cflag "-DFT_OS_LINUX"
	elif [ "$TARGET_OS" == "windows" ]; then
		CC=$CC_WINDOWS
		cf_add_cflag "-DFT_OS_WIN"
	else
		echo "target os '$TARGET_OS' not supported, defaulting to linux"
		CC=$CC_LINUX
		cf_add_cflag "-DFT_OS_LINUX"
	fi
	_end_dummy_target
	echo "selected C compiler: $CC"
	output=$(which "$CC")
	if [[ $? != 0 ]]; then
		cf_error "'which $CC' failed"
	fi

	echo "configure..."
	configure "${args[@]}"

	if [ "$MODE" == "json" ]; then echo; fi
}
#===================================================

RM="rm -rf"
CFLAGS=
INCLUDES=
#LIBS_PATHS="-L../../libft -L../ -L/usr/lib/x86_64-linux-gnu"
#LIBS="-lftgr -lft -lX11 -lXext -lm"
#windows:
LIBS_PATHS="-L../../libft -L../"
LIBS="-lftgr -lft -lgdi32 -lws2_32"
