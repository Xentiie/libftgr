#!/bin/bash
set -e

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--target)
            if [ "$2" != "windows" ] && [ "$2" != "linux" ]; then
                echo "Invalid option for -t: $2"
            fi
            TARGET="$2"
            shift # past argument
            shift # past value
            ;;
		-c|--coverage)
			COVERAGE="true"
			shift
			;;
		--post-coverage)
			echo Available profiling data:
			for f in $(find ./objs -name "*.gcda"); do
				f_basename=$(basename $f)
				srcs_path=$(find ./srcs -name "${f_basename%.gcda}.c")
				echo "	$srcs_path"
				mv $f `dirname $srcs_path`
			done
			exit 0
			;;
		--clean-coverage)
			echo "This will remove:"
			find ./srcs -name "*.gcda" -or -name "*.gcno"
			read -r -p "Are you sure? [y/N] " response
			case "$response" in
			    [yY][eE][sS]|[yY])
					for f in $(find ./srcs -name "*.gcda" -or -name "*.gcno"); do
						echo "Removing $f"
						rm $f
					done
			        ;;
			    *)
					echo "Nothing done"
			        ;;
			esac
			exit 0
			;;
        --glfw)
            GLFW="true"
            shift
            ;;
        -*|--*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift # past argument
            ;;
    esac
done

OBJS_PATH="./objs"

CC_WINDOWS=x86_64-w64-mingw32-gcc
#CC_WINDOWS=gcc.exe
CC_LINUX=gcc

RM="rm -rf"
CFLAGS="-Wall -Wextra -Wno-unknown-pragmas"
INCLUDES=
LIBS_PATHS=
LIBS=

if [[ "$COVERAGE" == "true" ]]; then
	CFLAGS="$CFLAGS -fprofile-arcs -ftest-coverage -O0"
	CC_LINUX=gcc-11
fi

if [ -z "$TARGET" ]; then
    if [ -f "/proc/sys/fs/binfmt_misc/WSLInterop" ]; then
        TARGET="windows"
    else
        TARGET="linux"
    fi
fi

if [ "$TARGET" = "windows" ]; then
    CC=$CC_WINDOWS
    CFLAGS="-DFT_OS_WIN $CFLAGS"

elif [ "$TARGET" = "linux" ]; then
    CC=$CC_LINUX
    CFLAGS="-DFT_OS_LINUX $CFLAGS"

else
    echo Not supported, defaulting to linux/glfw
    TARGET="linux"
    CC=$CC_LINUX
    CFLAGS="-DFT_OS_UNKNOWN $CFLAGS"
    GLFW="true"
fi

SRCS=()
OBJS=()

SRCS+=($(find ./srcs -not -path "./srcs/text/*" -type f -name "*.c"))
OBJS+=($(for i in "${!SRCS[@]}"; do printf "$OBJS_PATH/`basename ${SRCS[i]%.c}.o` "; done))

echo -n > config.mk

echo ".DEFAULT_GOAL := all" >> config.mk
echo "all: objs "'$(NAME)' >> config.mk
echo "" >> config.mk

echo "TARGET=$TARGET" >> config.mk
echo "RM=$RM" >> config.mk
echo "CC=$CC" >> config.mk
echo "CFLAGS=$CFLAGS" >> config.mk
echo "INCLUDES=$INCLUDES" >> config.mk
echo "LIBS_PATHS=$LIBS_PATHS" >> config.mk
echo "LIBS=$LIBS" >> config.mk
echo "OBJS_PATH=$OBJS_PATH" >> config.mk
echo -e "SRCS=${SRCS[@]}" >> config.mk
echo -e "OBJS=${OBJS[@]}" >> config.mk
echo "" >> config.mk

printf "objs:\n\tmkdir -p %s" "$OBJS_PATH" >> config.mk
echo "" >> config.mk

for i in "${!SRCS[@]}"; do
    printf "%s: %s\n" "${OBJS[i]}" "${SRCS[i]}" >> config.mk
    printf "\t%s %s %s -c %s -o %s\n" '$(CC)' '$(CFLAGS)' '$(INCLUDES)' "${SRCS[i]}" "${OBJS[i]}" >> config.mk
	if [[ "$COVERAGE" == "true" ]]; then
		printf "\tmv %s %s\n" "${OBJS[i]%.o}.gcno" `dirname ${SRCS[i]}` >> config.mk
	fi
	printf "\n" >> config.mk
done
echo "" >> config.mk

printf "clean:\n\t\t\t%s %s\n\n" '$(RM)' '$(OBJS)' >> config.mk
printf "fclean:\tclean\n\t\t\t%s %s\n\n" '$(RM)' '$(NAME)' >> config.mk
printf "re:\t\t\tfclean all\n\n" >> config.mk

printf ".PHONY:\t\t all clean fclean re\n" >> config.mk

